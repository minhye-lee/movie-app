{"version":3,"sources":["Movie.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Movie","props","title","poster","genres","synopsis","react","className","Movie_MoviePoster","map","genre","index","Movie_MovieGenre","key","Truncate","lines","ellipsis","trimWhitespace","MoviePoster","src","alt","MovieGenre","INIT_STATE","movies","page","App","state","_setMovies","_callee","rawMovie","regenerator_default","a","wrap","_context","prev","next","console","log","concat","_this","_fetchMovies","sent","id","large_cover_image","setState","prevState","stop","this","fetch","then","res","json","data","catch","err","_renderMovies","movie","Movie_Movie","react_infinite_scroller_default","pageStart","loadMore","hasMore","loader","React","Boolean","window","location","hostname","match","ReactDOM","render","react_default","createElement","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0TAYaA,SAA8B,SAACC,GAAU,IAC1CC,EAAoCD,EAApCC,MAAOC,EAA6BF,EAA7BE,OAAQC,EAAqBH,EAArBG,OAAQC,EAAaJ,EAAbI,SAC/B,OACIC,EAAA,qBAAKC,UAAU,SACXD,EAAA,qBAAKC,UAAU,eACXD,EAAA,cAACE,EAAD,CAAaN,MAAOA,EAAOC,OAAQA,KAEvCG,EAAA,qBAAKC,UAAU,eACXD,EAAA,wBAAKJ,GACLI,EAAA,qBAAKC,UAAU,eACVH,EAAOK,IAAI,SAACC,EAAgBC,GACzB,OACIL,EAAA,cAACM,EAAD,CAAYC,IAAKF,EAAOD,MAAOA,OAI3CJ,EAAA,qBAAKC,UAAU,iBACXD,EAAA,cAACQ,EAAA,EAAD,CAAUC,MAAO,EAAGC,SAAUV,EAAA,iCAAkBW,gBAAc,GACzDZ,QAQnBa,EAA4D,SAACjB,GAAU,IACjEC,EAAkBD,EAAlBC,MAAOC,EAAWF,EAAXE,OACf,OACQG,EAAA,qBAAKC,UAAU,cAAcY,IAAKhB,EAAQiB,IAAKlB,EAAOA,MAAOA,KAInEmB,EAA0C,SAACpB,GAAU,IAC/CS,EAAUT,EAAVS,MACR,OACIJ,EAAA,sBAAMC,UAAU,cAAcG,qBCvChCY,EAAa,CAACC,OAAS,GAAIC,KAAO,GA6DzBC,6MAzDbC,MAAQJ,IAERK,gCAAa,SAAAC,IAAA,IAAAC,EAAAN,EAAA,OAAAO,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACXC,QAAQC,IAAR,UAAAC,OAAsBC,EAAKb,MAAMF,OADtBS,EAAAE,KAAA,EAEYI,EAAKC,aAAaD,EAAKb,MAAMF,MAFzC,OAELK,EAFKI,EAAAQ,KAGXL,QAAQC,IAAIR,GACNN,EAASM,EAASpB,IAAI,SAACoB,GAE3B,MADc,CAAEa,GAAIb,EAASa,GAAIxC,MAAQ2B,EAAS3B,MAAOC,OAAS0B,EAASc,kBAAmBvC,OAASyB,EAASzB,OAAQC,SAAWwB,EAASxB,YAI9IkC,EAAKK,SAAS,SAAAC,GACZ,MAAO,CACLtB,OAAQsB,EAAUtB,OAAOe,OAAOf,GAChCC,KAAMqB,EAAUrB,KAAO,KAZhB,wBAAAS,EAAAa,SAAAlB,EAAAmB,WAiBbP,aAAe,SAAChB,GACd,OAAOwB,MAAK,uEAAAV,OAAwEd,IAC/EyB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAK7B,SACvB8B,MAAM,SAAAC,GAAG,OAAIlB,QAAQC,IAAIiB,QAGhCC,cAAgB,WAad,OAZehB,EAAKb,MAAMH,OAAOd,IAAI,SAAC+C,GACpC,OACIlD,EAAA,cAACmD,EAAD,CACI5C,IAAK2C,EAAMd,GACXA,GAAIc,EAAMd,GACVxC,MAAOsD,EAAMtD,MACbC,OAAQqD,EAAMrD,OACdC,OAAQoD,EAAMpD,OACdC,SAAUmD,EAAMnD,sFAQ1B,OACIC,EAAA,cAACoD,EAAA3B,EAAD,CACIxB,UAAU,MACVoD,UAAW,EACXC,SAAUb,KAAKpB,WACfkC,SAAS,EACTC,OAAQxD,EAAA,qBAAKC,UAAU,SAASM,IAAK,GAA7B,gBAETkC,KAAKQ,wBArDEQ,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAxC,EAAAyC,cAACC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.a6a3abf3.chunk.js","sourcesContent":["import * as React from 'react'\nimport Truncate from 'react-truncate';\nimport './Movie.css'\n\nexport interface movieItem {\n    id : number,\n    title : string,\n    poster : string,\n    genres : string[],\n    synopsis : string,\n}\n\nexport const Movie : React.FC<movieItem> = (props) => {\n    const { title, poster, genres, synopsis } = props\n    return (\n        <div className=\"movie\">\n            <div className=\"movieColumn\">\n                <MoviePoster title={title} poster={poster}/>\n            </div>\n            <div className=\"movieColumn\">\n                <h1>{title}</h1>\n                <div className=\"movieGenres\">\n                    {genres.map((genre : string, index : number) => {\n                        return (\n                            <MovieGenre key={index} genre={genre}/>\n                        )\n                    } )}\n                </div>\n                <div className=\"movieSynopsis\">\n                    <Truncate lines={3} ellipsis={<span>...</span>} trimWhitespace>\n                        {synopsis}\n                    </Truncate>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst MoviePoster : React.FC<{title : string, poster : string}> = (props) => {\n    const { title, poster } = props\n    return (\n            <img className=\"moviePoster\" src={poster} alt={title} title={title} />\n    )\n}\n\nconst MovieGenre : React.FC<{genre : string}> = (props) => {\n    const { genre } = props\n    return (\n        <span className=\"movieGenre\">{genre}</span>\n    )\n}","import * as React from 'react';\nimport './App.css';\nimport { Movie, movieItem } from \"./Movie\";\nimport InfiniteScroll from 'react-infinite-scroller'\n\ninterface State {\n  movies : movieItem[],\n  page : number,\n}\nconst INIT_STATE = {movies : [], page : 1}\n\nclass App extends React.Component<{}, State> {\n\n  state = INIT_STATE\n\n  _setMovies = async () => {\n    console.log(`page : ${this.state.page}`)\n    const rawMovie = await this._fetchMovies(this.state.page)\n    console.log(rawMovie)\n    const movies = rawMovie.map((rawMovie : any) => {\n      const movie = { id :rawMovie.id, title : rawMovie.title, poster : rawMovie.large_cover_image, genres : rawMovie.genres, synopsis : rawMovie.synopsis }\n      return movie\n    })\n\n    this.setState(prevState => {\n      return {\n        movies: prevState.movies.concat(movies),\n        page: prevState.page + 1,\n      }\n    })\n  }\n\n  _fetchMovies = (page : number) => {\n    return fetch(`https://yts.am/api/v2/list_movies.json?sort_by=rating&limit=14&page=${page}`)\n        .then(res => res.json())\n        .then(json => json.data.movies)\n        .catch(err => console.log(err))\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie : movieItem) => {\n      return (\n          <Movie\n              key={movie.id}\n              id={movie.id}\n              title={movie.title}\n              poster={movie.poster}\n              genres={movie.genres}\n              synopsis={movie.synopsis}\n          />\n      )\n    })\n    return movies\n  }\n\n  render () {\n    return (\n        <InfiniteScroll\n            className=\"App\"\n            pageStart={0}\n            loadMore={this._setMovies}\n            hasMore={true}\n            loader={<div className=\"loader\" key={0}>Loading ...</div>}\n        >\n          {this._renderMovies()}\n        </InfiniteScroll>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}